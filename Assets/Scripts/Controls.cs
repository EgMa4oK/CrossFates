//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Options/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CrossFates
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""15c5ba06-ecee-44fe-adf0-9e5c4b2d2b69"",
            ""actions"": [
                {
                    ""name"": ""Axis"",
                    ""type"": ""Value"",
                    ""id"": ""5e2bcc7f-b859-4874-8a42-c314afc0ee98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""fb0c1de9-0c6b-4e18-ad54-68fb99a7fbb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Parry"",
                    ""type"": ""Button"",
                    ""id"": ""c0c116ac-da31-47e4-ae18-e049405e5df6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ee200735-4aa3-4e53-80ac-1669ba2393ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fe3668e6-3338-46c2-b6e5-a09c2cab1b31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dcaea47d-a7b6-4913-a348-f5f83460de55"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""433c3c97-be52-4d2f-9ea5-513ac90621ec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard-Mouse"",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9d0177a5-8d18-41a8-b740-eb138debcbc5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard-Mouse"",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""807bbc6a-a07f-412c-9de3-e056f712974c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard-Mouse"",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57988bf8-84c6-4a67-99b9-2eed4481d6d4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard-Mouse"",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6437b86-aaf9-4008-9c37-5f857449778f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b460269-3276-4aa4-ba7c-050950670618"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6449996d-fa89-4863-baa0-28c029aa5682"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4046f5f1-aca9-405e-9507-4ed9979b5351"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard-Mouse"",
            ""bindingGroup"": ""Keyboard-Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Axis = m_Character.FindAction("Axis", throwIfNotFound: true);
            m_Character_Attack = m_Character.FindAction("Attack", throwIfNotFound: true);
            m_Character_Parry = m_Character.FindAction("Parry", throwIfNotFound: true);
            m_Character_Dash = m_Character.FindAction("Dash", throwIfNotFound: true);
            m_Character_Interact = m_Character.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Axis;
        private readonly InputAction m_Character_Attack;
        private readonly InputAction m_Character_Parry;
        private readonly InputAction m_Character_Dash;
        private readonly InputAction m_Character_Interact;
        public struct CharacterActions
        {
            private @Controls m_Wrapper;
            public CharacterActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Axis => m_Wrapper.m_Character_Axis;
            public InputAction @Attack => m_Wrapper.m_Character_Attack;
            public InputAction @Parry => m_Wrapper.m_Character_Parry;
            public InputAction @Dash => m_Wrapper.m_Character_Dash;
            public InputAction @Interact => m_Wrapper.m_Character_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Axis.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAxis;
                    @Axis.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAxis;
                    @Axis.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAxis;
                    @Attack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Parry.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnParry;
                    @Parry.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnParry;
                    @Parry.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnParry;
                    @Dash.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Interact.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Axis.started += instance.OnAxis;
                    @Axis.performed += instance.OnAxis;
                    @Axis.canceled += instance.OnAxis;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Parry.started += instance.OnParry;
                    @Parry.performed += instance.OnParry;
                    @Parry.canceled += instance.OnParry;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard-Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface ICharacterActions
        {
            void OnAxis(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnParry(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
